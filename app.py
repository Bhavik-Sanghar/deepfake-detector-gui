import streamlit as st
import tensorflow as tf
import os
import numpy as np
import time

from utils.image_utils import load_and_preprocess_image
from utils.ensemble import EnsembleModel
from utils.gramnet_utils import gram_matrix  # needed for custom loading

import gdown
import os

def download_if_not_exists(url, output_path):
    if not os.path.exists(output_path):
        gdown.download(url, output_path, quiet=False)


# ----------------------------
# üîß Page Config
# ----------------------------
st.set_page_config(
    page_title="Deepfake Detector",
    page_icon="üîç",
    layout="wide",
    initial_sidebar_state="expanded"
)

# ----------------------------
# üé® Load Custom CSS
# ----------------------------
with open("static/style.css") as f:
    st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)

# ----------------------------
# üß† Load Models (cached)
# ----------------------------
@st.cache_resource
def load_models():
    # Google Drive file URLs (use direct links or file IDs with gdown)
    densenet_url = "https://drive.google.com/uc?id=FILE_ID_1"
    resnet_url   = "https://drive.google.com/uc?id=FILE_ID_2"
    gramnet_url  = "https://drive.google.com/uc?id=FILE_ID_3"
    cooccur_url  = "https://drive.google.com/uc?id=FILE_ID_4"

    # Download if not already there
    download_if_not_exists(densenet_url, "models/best_densenet_model.keras")
    download_if_not_exists(resnet_url,   "models/best_resnet_model.keras")
    download_if_not_exists(gramnet_url,  "models/best_gramnet_model.keras")
    download_if_not_exists(cooccur_url,  "models/best_cooccurrence_model.keras")

    # Load models
    from utils.gramnet_utils import gram_matrix
    densenet = tf.keras.models.load_model("models/best_densenet_model.keras")
    resnet   = tf.keras.models.load_model("models/best_resnet_model.keras")
    gramnet  = tf.keras.models.load_model("models/best_gramnet_model.keras", custom_objects={"gram_matrix": gram_matrix})
    cooccur  = tf.keras.models.load_model("models/best_cooccurrence_model.keras")

    return [resnet, densenet, gramnet, cooccur]

# ----------------------------
# üß† App Title
# ----------------------------
st.markdown('<h1 class="main-header">üîç Deepfake Image Detector</h1>', unsafe_allow_html=True)
st.markdown('<p class="subheader">Upload an image to check if it\'s real or generated by AI</p>', unsafe_allow_html=True)

# ----------------------------
# üìö Sidebar Info
# ----------------------------
with st.sidebar:
    st.markdown("### About Deepfake Detector")
    st.markdown("""<div class="info-box">
        This tool uses an ensemble of neural networks to detect AI-generated deepfake images.
    </div>""", unsafe_allow_html=True)

    st.markdown("### How It Works")
    st.markdown("""<div class="model-info">
        <b>Model Ensemble:</b><br>
        ‚Ä¢ DenseNet ‚Äì detailed features<br>
        ‚Ä¢ ResNet ‚Äì content structure<br>
        ‚Ä¢ GramNet ‚Äì texture patterns<br>
        ‚Ä¢ Co-occurrence ‚Äì pixel-level stats
    </div>""", unsafe_allow_html=True)

    st.markdown("### Disclaimer")
    st.markdown("""<div class="info-box">
        While highly accurate, predictions are probabilistic and should not be considered absolute.
    </div>""", unsafe_allow_html=True)

# ----------------------------
# üñºÔ∏è UI Layout
# ----------------------------
col1, col2 = st.columns([1, 1])

with col1:
    st.markdown('<div class="upload-section">', unsafe_allow_html=True)
    uploaded_file = st.file_uploader(
    "Upload an image", 
    type=["jpg", "jpeg", "png"], 
    label_visibility="collapsed"
)
    
    if uploaded_file is None:
        st.markdown("### üì§ Upload an image to analyze")
        st.markdown("Supported formats: JPG, JPEG, PNG")
    st.markdown('</div>', unsafe_allow_html=True)

    if uploaded_file is not None:
        st.image(uploaded_file, caption="Uploaded Image", use_container_width=350)

with col2:
    if uploaded_file is not None:
        models = load_models()
        weights = [2, 6, 0.1, 0.1]
        class_labels = ["fake", "real"]
        ensemble_model = EnsembleModel(models, weights, class_labels)

        if st.button("üß† Analyze Image"):
            with st.spinner("Analyzing image..."):
                # Save uploaded image
                with open("temp.jpg", "wb") as f:
                    f.write(uploaded_file.getbuffer())

                time.sleep(0.5)
                img_input = load_and_preprocess_image("temp.jpg")
                label, prob = ensemble_model.predict(img_input)

                fake_prob = prob[0][0] * 100
                real_prob = prob[0][1] * 100

                # Results
                st.markdown('<div class="result-card">', unsafe_allow_html=True)
                st.markdown('<h3 class="prediction-header">Analysis Results:</h3>', unsafe_allow_html=True)

                if label.lower() == "fake":
                    st.markdown(f'### Verdict: <span class="fake-label">AI-GENERATED</span>', unsafe_allow_html=True)
                else:
                    st.markdown(f'### Verdict: <span class="real-label">AUTHENTIC</span>', unsafe_allow_html=True)

                # Bars
                st.markdown("### Confidence Scores:")
                st.markdown(f"**AI-Generated:** {fake_prob:.2f}%")
                st.progress(float(fake_prob) / 100)
                st.markdown(f"**Authentic:** {real_prob:.2f}%")
                st.progress(float(real_prob) / 100)


                # Explanation
                st.markdown("### Interpretation:")
                if fake_prob > 75:
                    st.markdown("This image shows strong indicators of AI generation.")
                elif fake_prob > 50:
                    st.markdown("Some characteristics of AI generation, but less certain.")
                elif real_prob > 75:
                    st.markdown("This image appears to be authentic.")
                else:
                    st.markdown("Mixed characteristics, uncertain classification.")
                st.markdown('</div>', unsafe_allow_html=True)
    else:
        st.markdown('<div class="result-card">', unsafe_allow_html=True)
        st.markdown("### üîç Results will appear here")
        st.markdown("Upload an image and click 'Analyze Image' to detect if it's real or AI-generated.")
        st.markdown('</div>', unsafe_allow_html=True)

# ----------------------------
# üöø Clean Temp
# ----------------------------
if os.path.exists("temp.jpg"):
    try:
        os.remove("temp.jpg")
    except:
        pass

# ----------------------------
# ‚öôÔ∏è Footer
# ----------------------------
st.markdown("---")
st.markdown("""<div style="text-align: center; color: #64748B; font-size: 0.8rem;">
    Deepfake Detector | Powered by Ensemble Neural Networks | v1.2.0
</div>""", unsafe_allow_html=True)
